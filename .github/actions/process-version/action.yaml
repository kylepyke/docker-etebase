name: "Process Version Data"
description: "Prepare and extract version information and variants"

inputs:
  version:
    description: "the target server version"
    required: true

outputs:
  version:
    description: "Clear Version (removes 'v' when necessary)"
    value: ${{ steps.export_version.outputs.version }}
  is_semver:
    description: "If version is a SEMVER or tag/brach"
    value: ${{ steps.export_version.outputs.is_semver }}
  ete_version:
    description: "Etebase Version"
    value: ${{ steps.export_version.outputs.ete_version }}
  py_version:
    description: "Python Base Image Version"
    value: ${{ steps.export_version.outputs.py_version }}

runs:
  using: "composite"
  steps:
    - id: export_version
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
      run: |
        CLEAN_VERSION="${VERSION#v}"

        if [[ ${CLEAN_VERSION} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          SEMVER='true'
          ETESYNC_VERSION="v${CLEAN_VERSION}"
        else
          SEMVER='false'
          ETESYNC_VERSION="${CLEAN_VERSION}"
        fi

        PY_VERSION=`grep "FROM python:" tags/base/Dockerfile | cut -d ':' -f 2`

        echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
        echo "is_semver=${SEMVER}" >> $GITHUB_OUTPUT
        echo "ete_version=${ETESYNC_VERSION}" >> $GITHUB_OUTPUT
        echo "py_version=${PY_VERSION}" >> $GITHUB_OUTPUT